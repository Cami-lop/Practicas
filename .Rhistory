sud[i,,]<-(temp_media)
i<-i+1
}
for(t in temp){
temp_media<-apply(temp,c(1),mean, na.rm=T)
sud[i,,]<-(temp_media)
i<-i+1
}
temp<-array(data=(rnorm(3650,mean=20, sd=2)),dim=c(3650,181,360))
lat<-seq(-90,90,1)
long<-seq(0,359,1)
dim(temp)
#Sudamérica (15N-60S, 275E-320E), quiero temp media anual y la anomalia para cada año en ese #periodo
#Tenga en cuenta que el arreglo puede contenter datos faltantes y estos están codicados con el #código -999.
temp[which(temp==-999)]<-NA #selecciono las posiciones de temp que sean igual a -999 y les pongo NA
#seleccione las coordenadas de america del sur
lat_sud<-which(lat %in% -15:-60)
lon_sud<-which(long %in% 275:320)
sud<-array(data=NA,dim=c(46,46,10))
i<-1
for(t in temp){
temp_media<-apply(temp,c(1,2),mean, na.rm=T)
sud[i,,]<-(temp_media)
i<-i+1
}
for(t in temp){
temp_media<-apply(temp,c(1,2),mean, na.rm=T)
sud[,,i]<-(temp_media)
i<-i+1
}
#1:10 porque son diez años
for(i in 1:10 ){
temp_media<-apply(temp,c(1,2),mean, na.rm=T)
sud[,,i]<-(temp_media)
i<-i+1
}
sud<-temp[lon_sud:lon_sud,lat_sud:lat_sud,]  #me faltaba el tiempo
sud<-temp[,lat_sud,lon_sud,]  #me faltaba el tiempo
sud<-temp[,lat_sud,lon_sud]  #me faltaba el tiempo
prom_anual<-apply(sud,c(2,3),mean)
View(prom_anual)
prom_anual<-apply(sud,c(1),mean)
sud<-array(data=NA,dim=c(10,46,46))
i<-1
#1:10 porque son diez años
for(i in 1:10 ){
temp_media<-apply(temp,c(2,3),mean, na.rm=T)
sud[i,,]<-(temp_media)
i<-i+1
}
sud<-array(data=NA,dim=c(365,10,45,45))
sud<-array(data=temp[,lat_sud,lon_sud],dim=c(365,10,45,45))
prom_anual<-apply(sud,c(2,3,4), mean)
prom_anual
temp<-array(data=(rnorm(3650,mean=15, sd=5)),dim=c(3650,181,360))
sud<-array(data=temp[,lat_sud,lon_sud],dim=c(365,10,45,45))
prom_anual<-apply(sud,c(2,3,4), mean)
#Ejercicio 3
a<-matrix(data=c(1:6),nrow=2, ncol=3)
b<-matrix(data=c(1:6),nrow=3, ncol=2)
#Ejercicio 3
rm(list)ls()
#Ejercicio 3
rm(list=ls())
a<-matrix(data=c(1:6),nrow=2, ncol=3)
b<-matrix(data=c(1:6),nrow=3, ncol=2)
funcion_matricial<-funcition(a,b){
funcion_matricial<-function(a,b){
funcion_matricial<-function(a,b) {
funcion_matricial<-function(a,b) {
funcion_matricial<-function(a,b) {
if(dim(a)==dim(b){
funcion_matricial<-function(a,b) {
if(dim(a)==dim(b)){
C<-a%%b
}else if(ncol(a)==ncol(b)){
C<-cbind(a,b)
}else if(nrow(a)==nrow(b)){
C<-rbind(a,b)
} else{
print("ERROR")
}
}
funcion_matricial<-function(a,b) {
if(dim(a)==dim(b)){
C<-a%%b
}else if(ncol(a)==ncol(b)){
C<-cbind(a,b)
}else if(nrow(a)==nrow(b)){
C<-rbind(a,b)
} else{
print("ERROR")
}
return(c)
}
funcion_matricial<-function(a,b) {
if(dim(a)==dim(b)){
C<-a%%b
}else if(ncol(a)==ncol(b)){
C<-cbind(a,b)
}else if(nrow(a)==nrow(b)){
C<-rbind(a,b)
} else{
print("ERROR")
}
return(C)
}
funcion_matricial(a,b)
dim(a)
dim(b)
dim_1<-dim(a)
dim_2<-dim(b)
length(dim_1)
length(dim_2)
funcion_matricial<-function(a,b) {
funcion_matricial<-function(a,b) {
ncol(a)
#Ejercicio 3
rm(list=ls())
a<-matrix(data=c(1:6),nrow=2, ncol=3)
b<-matrix(data=c(1:6),nrow=3, ncol=2)
funcion_matricial<-function(a,b) {
funcion_matricial<-function(a,b) {
if(ncol(a)==nrow(b) | nrow(a)==ncol(b)){
C<-a%*%b
}else if(ncol(a)==ncol(b)){
C<-cbind(a,b)
}else if(nrow(a)==nrow(b)){
C<-rbind(a,b)
} else{
print("ERROR, dim no compatibles ")
}
return(C)
}
funcion_matricial(a,b)
b<-matrix(data=c(1:6),nrow=2, ncol=2)
b<-matrix(data=c(1:6),nrow=1, ncol=6)
funcion_matricial<-function(a,b) {
if(ncol(a)==nrow(b) | nrow(a)==ncol(b)){
C<-a%*%b
}else if(ncol(a)==ncol(b)){
C<-cbind(a,b)
}else if(nrow(a)==nrow(b)){
C<-rbind(a,b)
} else{
print("ERROR, dim no compatibles ")
}
return(C)
}
funcion_matricial(a,b)
b<-matrix(data=c(1:8),nrow=2, ncol=4)
funcion_matricial<-function(a,b) {
if(ncol(a)==nrow(b) | nrow(a)==ncol(b)){
C<-a%*%b
}else if(ncol(a)==ncol(b)){
C<-cbind(a,b)
}else if(nrow(a)==nrow(b)){
C<-rbind(a,b)
} else{
print("ERROR, dim no compatibles ")
}
return(C)
}
funcion_matricial(a,b)
View(b)
b<-matrix(data=c(1:9),nrow=3, ncol=3)
funcion_matricial<-function(a,b) {
if(ncol(a)==nrow(b) | nrow(a)==ncol(b)){
C<-a%*%b
}else if(ncol(a)==ncol(b)){
C<-cbind(a,b)
}else if(nrow(a)==nrow(b)){
C<-rbind(a,b)
} else{
print("ERROR, dim no compatibles ")
}
return(C)
}
funcion_matricial(a,b)
b<-matrix(data=c(1:3),nrow=1, ncol=3)
funcion_matricial<-function(a,b) {
if(ncol(a)==nrow(b) | nrow(a)==ncol(b)){
C<-a%*%b
}else if(ncol(a)==ncol(b)){
C<-cbind(a,b)
}else if(nrow(a)==nrow(b)){
C<-rbind(a,b)
} else{
print("ERROR, dim no compatibles ")
}
return(C)
}
funcion_matricial(a,b)
funcion_matricial<-function(a,b) {
if(ncol(a)==nrow(b)){
C<-a%*%b
}else if(ncol(a)==ncol(b)){
C<-cbind(a,b)
}else if(nrow(a)==nrow(b)){
C<-rbind(a,b)
} else{
print("ERROR, dim no compatibles ")
}
return(C)
}
funcion_matricial(a,b)
funcion_matricial<-function(a,b) {
if(ncol(a)==nrow(b)){
C<-a%*%b
}else if(ncol(a)==ncol(b)){
C<-rbind(a,b)
}else if(nrow(a)==nrow(b)){
C<-cbind(a,b)
} else{
print("ERROR, dim no compatibles ")
}
return(C)
}
funcion_matricial(a,b)
View(a)
b<-matrix(data=c(1:8),nrow=2 ncol=4)
b<-matrix(data=c(1:8),nrow=2, ncol=4)
funcion_matricial<-function(a,b) {
if(ncol(a)==nrow(b)){
C<-a%*%b
}else if(ncol(a)==ncol(b)){
C<-rbind(a,b) #para hacer rbin deben coincidir num de columnas
}else if(nrow(a)==nrow(b)){
C<-cbind(a,b) #para hacer cbin dbene coincidir num de filas
} else{
print("ERROR, dim no compatibles ")
}
return(C)
}
funcion_matricial(a,b)
#Ejercicio 4
rm=list(ls()) #esta mal, es rm(list=ls())
m=readline("Ingrese el nombre de una estacion  meteorologica: " )
repeat{
repeat{
H=as.numeric(readline(" Ingrese la altura(en m)de la estacion:"))
if (H<0){
print ( " el numero ingresado no es valido. Vuelva a intentarlo")
} else if(H>=0){
break
}
}
H=as.numeric(readline(" Ingrese la altura(en m)de la estacion:"))
H=as.numeric(readline(" Ingrese la altura(en m)de la estacion:"))
repeat{
H=as.numeric(readline(" Ingrese la altura(en m)de la estacion:"))
if (H<0){
print ( " el numero ingresado no es valido. Vuelva a intentarlo")
} else if(H>=0){
break
}
}
repeat{
H=as.numeric(readline(" Ingrese la altura(en m)de la estacion:"))
if (H<0){
print ( " el numero ingresado no es valido. Vuelva a intentarlo")
} else if(H>=0){
break
}
}
repeat{
H=as.numeric(readline(" Ingrese la altura(en m)de la estacion:"))
if (H<0){
print ( " el numero ingresado no es valido. Vuelva a intentarlo")
} else if(H>=0){
break
}
}
#faltaria agregara un if(is.na(H))
if (H>=0 & H<200){
#faltaria agregara un if(is.na(H))
if (H>=0 & H<200){
print( paste(" la estacion" ,m, " es cercana al nivel del mar", sep=" " ))
} else if(H>=200 & H<=1000){
print(paste( " la estacion ",m, "se encuentra en terremo elevado" , sep=" " ))
} else if (H>1000 & H<=4000){
print(paste (" la estacion " ,m, " se encuentra en una cadena montaniosa " , sep=" " ))
} else if (H>4000){
print(paste( " la estacion" ,m, " es de dificil acceso " , sep=" " ) )
}
if (H>=0 & H<200){
print( paste(" la estacion" ,m, " es cercana al nivel del mar", sep=" " ))
} else if(H>=200 & H<=1000){
print(paste( " la estacion ",m, "se encuentra en terremo elevado" , sep=" " ))
} else if (H>1000 & H<=4000){
print(paste (" la estacion " ,m, " se encuentra en una cadena montaniosa " , sep=" " ))
} else if (H>4000){
print(paste( " la estacion" ,m, " es de dificil acceso " , sep=" " ) )
}
m=readline("Ingrese el nombre de una estacion  meteorologica: " )
repeat{
H=as.numeric(readline(" Ingrese la altura(en m)de la estacion:"))
if (H<0){
print ( " el numero ingresado no es valido. Vuelva a intentarlo")
} else if(H>=0){
break
}
}
#faltaria agregara un if(is.na(H))
if (H>=0 & H<200){
print( paste(" la estacion" ,m, " es cercana al nivel del mar", sep=" " ))
} else if(H>=200 & H<=1000){
print(paste( " la estacion ",m, "se encuentra en terremo elevado" , sep=" " ))
} else if (H>1000 & H<=4000){
print(paste (" la estacion " ,m, " se encuentra en una cadena montaniosa " , sep=" " ))
} else if (H>4000){
print(paste( " la estacion" ,m, " es de dificil acceso " , sep=" " ) )
}
rm=list(ls())
rm
View(rm)
setwd("C:/Users/camil/OneDrive/Escritorio/Cami_Labo/Practicas/")
#cambia las cosas de lugar, el else if h<0 abajo no tenia sentido
#no tenia sentido que todo este dentro del repeat
#Ejercicio 6
A<-c(TRUE, TRUE, FALSE, TRUE)
B = 4
C<- c(2,5,4,1)
D = 3
!(B==D)
C<D
C[D]
C[A]
A | !(C>B)
A==2 # <- T,F,F,F,F,F,F,F,T,F,T,F
#Ejercicio 7
A<-matrix(c(2,-1,4,0,3,0,1,0,2,1,2,3),ncol=3)
A==2 # <- T,F,F,F,F,F,F,F,T,F,T,F
d<- A[(A<=0)] #<- -1,0,0,0
d
which(A==3)
rowMeans(A)   #<-1 / 1 / 2,5
array(A[A>0], c(2, 4))
rm(list=ls())
#Ejercicio 1
x <- 3; t <- “pepe” ; l<- FALSE.
t <- "pepe"
l<- FALSE.
l<- FALSE
as.numeric(t) #<-pepe
as.numeric(l) #<- false o error
x> 0 | l      #<- TRUE
l& !(is.logical(t))# <-FALSE
paste(t,x)  # <-pepe3
paste0(t,x)    #<-pepe 3 si usaba paste0 el resultado iba a estar todo junto
#Ejercicio 2
rm(list=ls()) #borra todas las cosas que haya en el enviroment
a <-pi/2
b <-0
while(cos(a) == b & a < 4*pi){
print(a)
print(b)
a<-a+pi/2
}
print(a)
print(b)
#Ejercicio 2
rm(list=ls()) #borra todas las cosas que haya en el enviroment
#se va a repetir mientras se cumplan las condicion que el cos(a)=0 y que a sea menor a 4pi
#entra una sola vez al ciclo ya que, despues de una vuelta, las condiciones no se cumplen mas
#print (a)<-pi/2
#print(b)<-0
#Ejercicio 3
TE<-c(rnorm(12,14,4))
P<-c(rnorm(12,0.55,2))
A<-matrix(data=c(TE,P), nrow=2 )
View(A)
A<-matrix(data=c(TE,P), nrow=12  )
info_df<-data.frame("Temperautura"=A[,1],
"Precipitacion"=A[,2])
View(info_df)
rownames(info_df)<-c("E","F","M","A","M","J","J","A","S","O","N","D")
row.names(info_df)<-c("E","F","M","A","M","J","J","A","S","O","N","D")
View(info_df)
row.names(info_df)<-c("Enero","Feb","Mar","Abril","Mayo","Junio","Julio","Agosto","Sep","Oct","Nov","Dic")
View(info_df)
attach(info_df)
T_media_verano_d<-mean(info_df$Temperautura[which(row.names(info_df) == "Dic")])
T_media_verano_e<-mean(info_df$Temperatura[which(row.names(info_df) == "Enero")])
T_media_verano_e<-mean(info_df$Temperautura[which(row.names(info_df) == "Enero")])
T_media_verano_f<-mean(info_df$Temperautura[which(row.names(info_df) == "Feb")])
T_media_verano<-c(T_media_verano_d,T_media_verano_e,T_media_verano_f)
P_media_verano_d<-mean(info_df$Precipitacion[which(rownames(info_df) == "Dic")])
P_media_verano_e<-mean(info_df$Precipitacion[which(rownames(info_df) == "Enero")])
P_media_verano_f<-mean(info_df$Precipitacion[which(rownames(info_df) == "Feb")])
P_media_verano<-c(P_media_verano_d,P_media_verano_e,P_media_verano_f)
info_lista<-list("Media T"= T_media_verano,
"Media P"= P_media_verano)
View(info_lista)
#Ejercicio 4
#Transformar el vector
a<-c(5,12.1,7.2,8.2,3.5,2.0,5.8,10.4,1.7,6.0,5.3,0.5)
A<-matrix(data=a, ncol= 2 ,byrow=TRUE)
B<-matrix(data=a, ncol=6)
A
B
#Ejercicio 5
x1<- c(1,2,3)
x2<- c(4,5,6)
x3<- c(0,0,0)
XC<- cbind(x1,x2,x3) #quedaria uno al lado del otro 1 2 3 4 5 6 0 0 0
View(XC)
is.matrix(XC)|is.matrix(x1) #TRUE
dim(XC) #3x3
XR<- rbind(x1,x2,x3) ##quedaria uno abajo del otro 1 2 3 / 4 5 6/ 0 0 0
View(XR)
XC%∗%XR              # Error no dan las dimensiones
XC%*%XR              # Error no dan las dimensiones
2*XC                 #2,4,6,8,10,12,0,0,0,0
A<-matrix(c(3,1,0,2,5,1,2,2,3,4,1,2),ncol = 3,nrow = 4)
#arma una matriz que se llena por columnas
B<-matrix(NA,ncol = 3,nrow = 4) #arma una matriz compuesta de NA
for(j in 1:dim(A)[2]){  #el ciclo recorre de 1 a 9 que es la dimension de A
for (i in 1:length(A[,1])){ # este ciclo recorre 1 al largo de la toda la fila de la primer columna de A
B[j,i]<-sum(A[i,])
}
}
View(B)
1:dim(A)[2]
1:length(A[,1])
#correccion
for(j in 1:4){
for (i in 1:4){
B[j,i]<-sum(A[i,])
}
}
#correccion
for(j in 1:4){
for (i in 1:4){
B[i,j]<-sum(A[i,])
}
}
#correccion
for(j in 1:dim(A)[2]){
for(j in 1:dim(A)[2]){
for(i in 1:length(A[,1])){
B[i,j]<-sum(A[i,])
}
}
View(B)
B
B
dim(A)[1]
#Ejercicio 7
A<-c(“Juan”, “Pablo”,“Carla”, “Mariana”,“Cristian”)
#Ejercicio 7
A<-c("Juan", "Pablo","Carla", "Mariana","Cristian")
B <-c("34 8 1984 7 1 37")
(a) paste(A[1],"tiene",substr(B,15,nchar(B)),"años")
paste(A[1],"tiene",substr(B,15,nchar(B)),"años")
#Juan tiene 37 años
B[1]==substr(B,5,5)
#FALSE
as.numeric(substr(B,8,9))/as.numeric(substr(B,6,6))
#84/1<-84
print(paste(A[2],"nacio el",paste(substr(B,11,11),substr(B,4,4),substr(B,6,9),sep="/")),quote=FALSE)
#Ejercicio 8
M<-matrix(c(1,2,8,-1,3,0),nrow=2)
B<-1
C<- M>B
View(C)
c
C
(M<=B+1) & C
D<-M[!C]
D
is.logical(D)
#Ejercicio 9
Fa<-matrix(c(2,1,0,-2,-1,0,1,0,1),ncol=3,byrow=TRUE)
g<-c(2,4,6)
Fa[which(Fa==0)]<-NA
View(Fa)
#Ejercicio 9
rm(list=ls())
Fa<-matrix(c(2,1,0,-2,-1,0,1,0,1),ncol=3,byrow=TRUE)
A<-cbind(Fa,g)
g<-c(2,4,6)
A<-cbind(Fa,g)
A
B<-matrix(c(2,1,0,-2,-1,0,1,0,1),ncol=3)
B
C<-Fa[T,F,F,F,F,T,T,F,F]
E<-c(T,F,T,F,F,F,T,F,F)
C<-Fa[E]
C
Fa<-matrix(c(2,1,0,-2,-1,0,1,0,1),ncol=3,byrow=TRUE)
C<-Fa[E]
C
E<-c(T,F,F,F,F,T,T,F,F)
C<-Fa[E]
C
E<-c(T,F,F,F,F,T,F,F,T)
C<-Fa[E]
C
#Ejercicio 10
rm(list=ls()) #borro el enviroment
a<-array(c(1,2,3,4),c(2,2)) #armo una matriz de 2x2 que se llena x columnas
b<-array(c(1,3,2,4),c(2,2)) #armo una matriz de 2x2 que se llena x columnas
c<- which(a == b) # las posiciones donde "a" es igual a "b" 1,4
out<-"La variable c es"
if(max(c)>2){
print(paste(out,"azul",sep=" "),quote=FALSE)
} else if(max(c) == 2) {
print(paste(out,"roja",sep=" "),quote=FALSE)
} else{
print(paste(out,"verde",sep=" "),quote=FALSE)
}
