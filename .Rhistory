estadistica_2(estaciones_df)
rango
diferencia<-(valor_max[i]-valor_min[i])/2
valor_max
rango<-c()
estadistica_2<-function(x){
for(variable in names(x)){
if(variable=="Tmedia_enero"){
for (i in 1:nrow(x)) {
valor_max<-max(x[[2]][[i]], na.rm=TRUE)
valor_min<-min(x[[2]][[i]], na.rm=TRUE)
diferencia<-(valor_max[i]-valor_min[i])/2
rango<-c(rango,diferencia)
mediana<-median(x[[2]][[i]], na.rm=TRUE)
return(matrix(c(x[[1]][[i]],rango,mediana),nrow = 5, ncol=3))
}
}
}
}
estadistica_2(estaciones_df)
estadistica_2<-function(x){
rango<-c()
resultados<-matrix(nrow = nrow(x), ncol = 3)
for (i in 1:nrow(x)){
if(variable=="Tmedia_enero"){
valor_max<-max(x[[2]][[i]], na.rm=TRUE)
valor_min<-min(x[[2]][[i]], na.rm=TRUE)
diferencia<-(valor_max[i]-valor_min[i])/2
rango<-c(rango,diferencia)
mediana<-median(x[[2]][[i]], na.rm=TRUE)
resultados[i,]<-c(x[[1]][[i]],rango[i],madianai)
}
}
return(resultados)
}
estadistica_2(estaciones_df)
rango
estadistica_2<-function(x){
rango<-c()
resultados<-matrix(nrow = nrow(x), ncol = 3)
for (i in 1:nrow(x)){
if(variable=="Tmedia_enero"){
valor_max<-max(x$Tmedia_enero, na.rm=TRUE)
valor_min<-min(x$Tmedia_enero, na.rm=TRUE)
diferencia<-(valor_max-valor_min)/2
rango<-c(rango,diferencia)
mediana<-median(x$Tmedia_enero, na.rm=TRUE)
resultados[i,]<-c(x$estaciones[i],rango[i],mediana)
}
}
return(resultados)
}
estadistica_2(estaciones_df)
valor_max<-max(x[[2]][[1]], na.rm=TRUE)
valor_max<-max(estaciones_df[[2]][[1]], na.rm=TRUE)
valor_max
estaciones_df[[1]]
estaciones_df[[1]][[1]]
estadistica_2<-function(x){
rango<-c()
resultados<-matrix(nrow = nrow(x), ncol = 3)
for (i in 1:nrow(x)){
if(variable=="Tmedia_enero"){
valor_max<-max(x[[2]][[i]], na.rm=TRUE)
valor_min<-min(x[[2]][[i]], na.rm=TRUE)
diferencia<-(valor_max-valor_min)/2
rango<-c(rango,diferencia)
mediana<-median(x$Tmedia_enero, na.rm=TRUE)
resultados[i,]<-c(x[[1]][[i]],rango[i],mediana)
}
}
return(resultados)
}
estadistica_2(estaciones_df)
estadistica_2 <- function(x) {
rango <- numeric()  # Inicializa un vector vacío para almacenar los rangos
resultados <- matrix(nrow = nrow(x), ncol = 3)
for (i in 1:nrow(x)) {
if ("Tmedia_enero" %in% names(x)) {  # Verifica si la columna "Tmedia_enero" existe
valor_max <- max(x$Tmedia_enero, na.rm = TRUE)
valor_min <- min(x$Tmedia_enero, na.rm = TRUE)
diferencia <- (valor_max - valor_min) / 2
rango <- c(rango, diferencia)
mediana <- median(x$Tmedia_enero, na.rm = TRUE)
resultados[i, ] <- c(x$estacion[i], rango[i], mediana)
}
}
return(resultados)
}
estadistica_2(estaciones_df)
estadistica_2(estaciones)
estadistica_2 <- function(x) {
rango <- numeric()  # Inicializa un vector vacío para almacenar los rangos
resultados <- matrix(nrow = nrow(x), ncol = 3)
for (i in 1:nrow(x)) {
if ("Tmedia_enero" %in% names(x)) {
# Verifica y convierte la columna a un vector numérico
if (!is.numeric(x$Tmedia_enero)) {
x$Tmedia_enero <- as.numeric(x$Tmedia_enero)
}
valor_max <- max(x$Tmedia_enero, na.rm = TRUE)
valor_min <- min(x$Tmedia_enero, na.rm = TRUE)
diferencia <- (valor_max - valor_min) / 2
rango <- c(rango, diferencia)
mediana <- median(x$Tmedia_enero, na.rm = TRUE)
resultados[i, ] <- c(x$estacion[i], rango[i], mediana)
}
}
return(resultados)
}
estadistica_2(estaciones_df)
estadistica_2(estaciones)
estadistica_2<-function(x){
rango<-c()
resultados<-matrix(nrow = nrow(x), ncol = 3)
for (i in 1:nrow(x)){
if(variable=="Tmedia_enero"){
valor_max<-max(x[[2]][[i]], na.rm=TRUE)
valor_min<-min(x[[2]][[i]], na.rm=TRUE)
diferencia<-(valor_max-valor_min)/2
rango<-c(rango,diferencia)
mediana<-median(x$Tmedia_enero, na.rm=TRUE)
resultados[i,]<-c(x[[1]][[i]],rango[i],mediana)
}
}
return(resultados)
}
estadistica_2(estaciones_Df)
estadistica_2(estaciones_df)
estadistica_2<-function(x){
rango<-c()
resultados<-matrix(nrow = nrow(x), ncol = 3)
for (i in 1:nrow(x)){
if(variable=="Tmedia_enero"){
valores_enero <- as.numeric(as.character(x[[2]][[i]]))
valores_enero <- na.omit(valores_enero)
if(length(valores_enero)>0){
valor_max<-max(valores_enero, na.rm=TRUE)
valor_min<-min(valores_enero, na.rm=TRUE)
diferencia<-(valor_max-valor_min)/2
rango<-c(rango,diferencia)
mediana<-median(x$Tmedia_enero, na.rm=TRUE)
resultados[i,]<-c(x[[1]][[i]],rango[i],mediana)
}
}
return(resultados)
}
}
estadistica_2(estaciones_df)
resultados[1,]
estadistica_2<-function(x){
rango<-c()
resultados<-matrix(nrow = nrow(x), ncol = 3)
for (i in 1:nrow(x)){
if(variable=="Tmedia_enero"){
valor_max<-max(x[[2]][[i]], na.rm=TRUE)
valor_min<-min(x[[2]][[i]], na.rm=TRUE)
diferencia<-(valor_max-valor_min)/2
rango<-c(rango,diferencia)
mediana<-median(x[[2]][[i]], na.rm=TRUE)
resultados[i,]<-c(x[[1]][[i]],rango[i],mediana) # se lo asigno a una fila especifica
}
}
return(resultados)
}
estadistica_2(estaciones_df)
class(estaciones_df$Tmedia_enero)
estaciones_df$Tmedia_enero<-as.vector(estaciones_df$Tmedia_enero)
estadistica_2<-function(x){
rango<-c()
resultados<-matrix(nrow = nrow(x), ncol = 3)
for (i in 1:nrow(x)){
if(variable=="Tmedia_enero"){
valor_max<-max(x[[2]][[i]], na.rm=TRUE)
valor_min<-min(x[[2]][[i]], na.rm=TRUE)
diferencia<-(valor_max-valor_min)/2
rango<-c(rango,diferencia)
mediana<-median(x[[2]][[i]], na.rm=TRUE)
resultados[i,]<-c(x[[1]][[i]],rango[i],mediana) # se lo asigno a una fila especifica
}
}
return(resultados)
}
estadistica_2(estaciones_df)
View(estacion)
View(estaciones)
class(estaciones)
dim(estaciones)
estaciones[[2]][[1]]
estaciones[[3]][[1]]
estaciones[[3]][[3]]
estaciones[[5]][[3]]
estaciones[[1]][[3]]
estaciones[[1]][[1]]
estaciones[[1]][[1]][[2]]
estaciones[[1]][[1]][1]
estaciones[[1]][[1]][2]
estaciones[[1]][[1]][3]
class((estaciones))
estadistica_2 <- function(x){
rango <- c()
resultados <- matrix(nrow = nrow(x), ncol = 3)
for (i in 1:nrow(x)){
if ("Tmedia_enero" %in% names(x)) {
valor_max <- max(x$Tmedia_enero, na.rm = TRUE)
valor_min <- min(x$Tmedia_enero, na.rm = TRUE)
diferencia <- (valor_max - valor_min) / 2
rango <- c(rango, diferencia)
mediana <- median(x$Tmedia_enero, na.rm = TRUE)
resultados[i,] <- c(x$estacion[i], rango[i], mediana)
}
}
return(resultados)
}
estadistica_2(estaciones_df)
estadistica_2(estaciones)
estaciones_df[[2]][[1]]
estaciones_df[[1]][[1]]
estaciones_df[[1]][[2]]
estadistica_2 <- function(x){
rango <- c()
resultados <- matrix(nrow = nrow(x), ncol = 3)
for (i in 1:nrow(x)){
if ("Tmedia_enero" %in% names(x)) {
valor_max <- max(x[[2]][[i]], na.rm = TRUE)
valor_min <- min(x[[2]][[i]], na.rm = TRUE)
diferencia <- (valor_max - valor_min) / 2
rango <- c(rango, diferencia)
mediana <- median(x[[2]][[i]], na.rm = TRUE)
resultados[i,] <- c(x[[1]][[i]], rango[i], mediana)
}
}
return(resultados)
}
estadistica_2(estaciones_df)
rownames(resultados)<-c("Estacion 1","Estacion 2","Estacion 3","Estacion 4","Estacion 5")
##corregido, siempre el if iba a dar falso por ende le preguntas si hay una variable que se llama asi y ahi entra
estadistica_2 <- function(x){
rango <- c()
resultados <- matrix(nrow = nrow(x), ncol = 3)
for (i in 1:nrow(x)){
if ("Tmedia_enero" %in% names(x)) { # el operador %in% me dice si existe esa variable en x
valor_max <- max(x[[2]][[i]], na.rm = TRUE)
valor_min <- min(x[[2]][[i]], na.rm = TRUE)
diferencia <- (valor_max - valor_min) / 2
rango <- c(rango, diferencia)
mediana <- median(x[[2]][[i]], na.rm = TRUE)
resultados[i,] <- c(x[[1]][[i]], rango[i], mediana)
rownames(resultados)<-c("Estacion 1","Estacion 2","Estacion 3","Estacion 4","Estacion 5")
colnames(resultados)<-c("Estaciones","Rango","Mediana")
}
}
return(resultados)
}
estadistica_2(estaciones_df)
###########Ejercicio 10##########
rm(list=ls())
getwd()
setwd("C:/Users/Fernando Cabrera/Desktop/Cami_Labo/Practicas")
getwd()
nombres<-c("Camila","Eliana","Maite","Candelaria","Ezequiel","Esteban","Matias","Emanuel")
funcion<-function<-(nombres,letra){
funcion<-function(nombres,letra){
j<-1
lista_nombres<-list()
for(i in 1:length(nombre)){
if ((substr(nombres[i],1,1)) == (letra)){
nombres_letra[[j]]<-nombres[i]
j=j+1
}
}
if (length(nombres_letra)==0){
warning("La letra ingresada no tiene nombres asignados de la lista")
}
return(nombres_letra)
}
funcion(nombres,c)
funcion<-function(nombres,letra){
j<-1
lista_nombres<-list()
for(i in 1:length(nombres)){
if ((substr(nombres[i],1,1)) == (letra)){
nombres_letra[[j]]<-nombres[i]
j=j+1
}
}
if (length(nombres_letra)==0){
warning("La letra ingresada no tiene nombres asignados de la lista")
}
return(nombres_letra)
}
funcion(nombres,c)
funcion<-function(nombres,letra){
nombres_letra<-list() #(1)
j<-1 #(2)
for (i in 1:length(nombres)){ #(3)
if ((substr(nombres[i],1,1)) == (letra)){ #(4)
nombres_letra[[j]]<-nombres[i]
j=j+1
}
}
if (length(nombres_letra)==0){ #(5)
warning("La letra ingresada no tiene nombres asignados de la lista")
}
return(nombres_letra) #(6)
}
funcion(nombres,"C")
funcion(nombres,C)
##########Ejercicio 12#############
rm(list=ls())
archivo<-"C:/Users/Fernando Cabrera/Desktop/Cami_Labo/Practicas/Datos Practica 3-20231011/presiondesaturacion.txt"
datos_presion<-read.table(archivo, header=TRUE)
class(datos_presion)
View(datos_presion)
colnames(datos_presion)<-c("Temperatura","Presion de vapor")
View(datos_presion)
p_vapor<-function(datos,t){ #(1)
if(t < min(datos[1]) | t > (max(datos[1]))) { #(2)
warning("La temperatura ingresada esta fuera del rango")
}else{
j=1
while(t>datos[[1]][j]){ #recorre j
j=j+1
}
t1<-datos[[1]][j-1] #Se queda con 1er columna, el dato anterior a j
t2<-datos[[1]][j]   #Se queda con 1er columna, el dato j
p1<-datos[[2]][j-1] #Se queda con 2da columna, el dato anterior a j
p2<-datos[[2]][j]   #Se queda con 2da columna, el dato j
p<-p1+(t-t1)*(p2-p1)/(t2-t1) #Calculo de regresion
return(p)
}
}
p_vapor(datos_presion,24)
p_vapor(datos_presion,450)
datos_presion[[1]][1]
datos_presion[[1]][0]
###########EJ 15 P2###########
rm(list=ls())
getwd()
valores<-c()
x<-0
while (lenght(x)<15) {
repeat{
x<-readline("Ingrese un valor numerico")
}if(is.na(x)){
x
is.na(x)
while (lenght(x)<15) {
x<-readline("Ingrese un valor numerico")
if(is.na(x)){
repeat{
x<-readline("Ingrese un valor numerico nuevamente")
}
valores<-c(valores,x)
}
}
while (length(x)<15) {
x<-readline("Ingrese un valor numerico")
if(is.na(x)){
repeat{
x<-readline("Ingrese un valor numerico nuevamente")
}
valores<-c(valores,x)
}
}
while (length(x)<15) {
x<-readline("Ingrese un valor numerico")
if(is.na(x)){
repeat{
x<-readline("Ingrese un valor numerico nuevamente")
}if(length(x)>15){
repeat{
x<-readline("Ingrese un valor numerico")
if(is.na(x)){
repeat{
x<-readline("Ingrese un valor numerico")
}
}if(length(x)>15){
repeat{
x<-readline("Ingrese un valor numerico")
if(is.na(x)){
repeat{
x<-readline("Ingrese un valor numerico")
}
} if(length(x)>15){
repeat{
x<-readline("Ingrese un valor numerico")
if(is.na(x)){
repeat{
x<-readline("Ingrese un valor numerico")
}
}else if(length(x)>15){
break
}
}
###########EJ 14 P2###########
rm(list=ls())
valores<-c()
x<-0
while(length(valores)<16){
x<-readline("Ingrese un valor numerico")
if(is.na(x)){
repeat{
x<-readline("Ingrese un valor numerico")
}
}
valores<-c(valores,x)
}
media<-mean(valores)
media<-mean(valores, na.rm=TRUE)
valores<-as.numeric(c(valores,x))
media<-mean(valores, na.rm=TRUE)
desvio<-sd(valores, na.rm=TRUE)
################Ejercicio 15#################
#Hacer un programa que pida el ingreso del nombre y apellido de un estudiante y la cantidad de materias que aprob´o. Luego debe pedir el ingreso del nombre de cada materia y la nota que obtuvo en
#cada caso. Finalmente, el programa debe imprimir el siguiente mensaje (Sin las comillas):
rm(list=ls())
getwd()
nombre<-readline("Ingrese su nombre")
apellido<-readline("Ingrese su apellido")
nombre_completo<-paste(nombre,apellido, sep=" ")
nombre_completo
promedio_hist<-8.41
materias<-readline("Ingrese la cantidad de materias aprobadas (final aprobado)")
notas<-c()
length(materias)
materias
notas<-c()
while(length(notas)< materias){
n<-readline("Ingrese cada nota de los examenes aprobados")
if(is.na(n)){
repeat{
n<-readline("Ingrese nuevamente la nota del examen aprobado")
}
}
notas<-c(notas,n)
}
4
length(notas)
materias<-as.numeric(readline("Ingrese la cantidad de materias aprobadas (final aprobado)"))
promedio_hist<-8.41
notas<-c()
while(length(notas)< materias){
n<-readline("Ingrese cada nota de los examenes aprobados")
if(is.na(n)){
repeat{
n<-readline("Ingrese nuevamente la nota del examen aprobado")
}
}
notas<-c(notas,n)
}
promedio<-mean(notas)
notas<-as.numeric(c(notas,n))
promedio<-mean(notas)
################Ejercicio 15#################
#Hacer un programa que pida el ingreso del nombre y apellido de un estudiante y la cantidad de materias que aprob´o. Luego debe pedir el ingreso del nombre de cada materia y la nota que obtuvo en
#cada caso. Finalmente, el programa debe imprimir el siguiente mensaje (Sin las comillas):
rm(list=ls())
rm(list=ls())
getwd()
nombre<-readline("Ingrese su nombre")
nombre_completo<-paste(nombre,apellido, sep=" ")
nombre<-readline("Ingrese su nombre")
apellido<-readline("Ingrese su apellido")
nombre_completo<-paste(nombre,apellido, sep=" ")
materias<-as.numeric(readline("Ingrese la cantidad de materias aprobadas (final aprobado)"))
promedio_hist<-8.41
notas<-c()
while(length(notas)< materias){
n<-readline("Ingrese cada nota de los examenes aprobados")
if(is.na(n)){
repeat{
n<-readline("Ingrese nuevamente la nota del examen aprobado")
}
}
notas<-as.numeric(c(notas,n))
}
promedio<-mean(notas)
notas<-c()
while(length(notas)< materias){
n<-readline("Ingrese cada nota de los examenes aprobados")
while(is.na(n)){
n<-readline("Ingrese nuevamente la nota del examen aprobado")
}
notas<-as.numeric(c(notas,n))
}
nombre<-readline("Ingrese su nombre")
apellido<-readline("Ingrese su apellido")
nombre_completo<-paste(nombre,apellido, sep=" ")
materias<-as.numeric(readline("Ingrese la cantidad de materias aprobadas (final aprobado)"))
promedio_hist<-8.41
notas<-c()
while(length(notas)< materias){
n<-readline("Ingrese cada nota de los examenes aprobados")
while(is.na(n)){
n<-readline("Ingrese nuevamente la nota del examen aprobado")
}
notas<-as.numeric(c(notas,n))
}
promedio<-mean(notas)
if(promedio<promedio_hist){
cat("El alumno",nombre_completo,"aprobo",materias,"materias","y su promedio es menor al historico")
}else if (promedio=promedio_hist){
if(promedio<promedio_hist){
cat("El alumno",nombre_completo,"aprobo",materias,"materias","y su promedio es menor al historico")
}else if (promedio==promedio_hist){
cat("El alumno",nombre_completo,"aprobo",materias,"materias","y su promedio es igual al historico")
}else if (materias == 0){
cat("El alumno",nombre_completo,"aun no aprobo materias")
} else{
cat("El alumno",nombre_completo,"aprobo",materias,"materias","y su promedio es mayor al historico")
}
