.Machine$double.eps
.Machine$double.neg.eps
.Machine$double.xmin
.Machine$double.xmax
.Machine$double.base
.Machine$double.digits
.Machine$integer.max
a<-as.integer(1)
b<-as.integer(2)
a/b
class(a/b)
# comparar el resultado de las siguientes operacion
rm.(list=ls()) #borro datos guardados en enviroment
# comparar el resultado de las siguientes operacion
.rm(list=ls()) #borro datos guardados en enviroment
# comparar el resultado de las siguientes operacion
rm(list=ls()) #borro datos guardados en enviroment
# comparar el resultado de las siguientes operacion
rm(list=ls()) #borro datos guardados en enviroment
a<-as.double(1)
b<-as.double(3)
a/b
class(a/b)
rm(list=ls())
a<-as.single(1)
b<-as.single(3)
a/b
class(a/b)
rm(list=ls()) #borro datos guardados en environment
a<-as.integer(2)
b<-3.14159
is.integer(a)
is.integer(b)
is.numeric(a)
is.numeric(b)
is.double(a)
is.double(b)
#Interpretar el resultado de la siguiente operacion:
rm(list=ls())
a<-as.integer(3)
b<-as.integer(3.14159)
a*b
#Determinar el resultado de las siguientes operaciones,dado a un numero real y b un numero entero
rm(list=ls())
a<-0.85
b<-round(a)
b<-ceiling(a)
b<-floor(a)
b<-trunc(a)
a<-0.85
b<-round(a)
b<-ceiling(a)
rm(list=ls())
a<-0.85
b<-ceiling(a)
b<-floor(a)
b<-trunc(a)
rm(list=ls()) #Limpio el environment
#Ingreso de los dias
dia<-as.integer(readline("Ingrese un día del mes de Agosto"))
#Para que el ingreso de dias sea entre los dias reales de agosto, es decir entre el 1 y el 31
while(dia<1 | dia>31){
dia<-as.integer(readline("Ingrese un dia del mes de Agosto"))
if(dia>=1 | dia<=31){
break
}
}
#Ingreso de los dias
dia<-as.integer(readline("Ingrese un día del mes de Agosto"))
#Para que el ingreso de dias sea entre los dias reales de agosto, es decir entre el 1 y el 31
while(dia<1 | dia>31){
dia<-as.integer(readline("Ingrese un dia del mes de Agosto"))
if(dia>=1 | dia<=31){
break
}
}
#Ingreso de la temperatura
temp<-c() #defino un vector vacío para que los ingresos de valores de temperatura se vayan guardando ahí
for (i in seq(1:31)) {
t<-as.numeric(readline("Ingresela temperatura"))
temp<-c(temp,t)
}
print(temp)
#Calculo del promedio
prom<-mean(temp)
#Impresión por consola, sin las comillas
for(valor in temp){
if(valor<prom){
cat("El dia",dia,"del mes de Agosto, la temperatura fue de",valor,"°C, es decir debajo de la media mensual","\n")
} else if (valor>prom) {
cat("El dia",dia,"del mes de Agosto, la temperatura fue de", valor,"°C, es decir encima de la media mensual","\n")
} else {
cat("El dia",dia,"del mes de Agosto, la temperatura fue de",valor,"°C, es decir igual a la media mensual","\n")
}
}
#Ingreso de los dias
dia<-as.integer(readline("Ingrese un día del mes de Agosto"))
#Para que el ingreso de dias sea entre los dias reales de agosto, es decir entre el 1 y el 31
while(dia<1 | dia>31){
dia<-as.integer(readline("Ingrese un dia del mes de Agosto"))
if(dia>=1 | dia<=31){
break
}
}
#Ingreso de los dias
dia<-as.integer(readline("Ingrese un día del mes de Agosto"))
#Para que el ingreso de dias sea entre los dias reales de agosto, es decir entre el 1 y el 31
while(dia<1 | dia>31){
dia<-as.integer(readline("Ingrese un dia del mes de Agosto"))
if(dia>=1 | dia<=31){
break
}
}
#Ingreso de la temperatura
temp<-c() #defino un vector vacío para que los ingresos de valores de temperatura se vayan guardando ahí
for (i in seq(1:31)) {
t<-as.numeric(readline("Ingresela temperatura"))
temp<-c(temp,t)
}
print(temp)
#Calculo del promedio
prom<-mean(temp)
#Impresión por consola, sin las comillas
for(valor in temp){
if(valor<prom){
cat("El dia",dia,"del mes de Agosto, la temperatura fue de",valor,"°C, es decir debajo de la media mensual","\n")
} else if (valor>prom) {
cat("El dia",dia,"del mes de Agosto, la temperatura fue de", valor,"°C, es decir encima de la media mensual","\n")
} else {
cat("El dia",dia,"del mes de Agosto, la temperatura fue de",valor,"°C, es decir igual a la media mensual","\n")
}
}
dias<-readline("Ingrese un dia del mes de Agosto")
agosto<-1:31  #dias del mes de agosto
temp<-c()
repeat{
if(dias<1 | dias>31 ){
print("ERROR, EL NUMERO INGRESADO NO ES VALIDO")
dias<-readline("Ingrese un dia del mes de Agosto")
} else if( dias>=1 | dias<=31){
break
}
}
if((dias>=1) | (dias<=31)){
for(dia in agosto){
temperatura<-as.numeric(readline("Ingrese temperatura en °C"))
temp<-as.numeric(c(temp,temperatura))
}
}
print(temp)
promedio_temp<-(mean(temp))
if(temperatura<promedio_temp){
print(paste("El dia",dias,"del mes de Agosto la temperatura fue de",temperatura,"°C es decir debajo de la media mensual"))
}else if(temperatura>promedio_temp){
print(paste("El dia",dias,"del mes de Agosto la temperatura fue de",temperatura,"es decir por encima  de la  media mensual"))
}else if(temperatura==promedio_temp){
print(paste("El dia",dias, "del mes de Agosto la temperatura fue de",temperatura,"ºC es decir igual a la media mensual"))
}
dias<-readline("Ingrese un dia del mes de Agosto")
if((dias>=1) | (dias<=31)){
for(dia in agosto){
temperatura<-as.numeric(readline("Ingrese temperatura en °C"))
temp<-as.numeric(c(temp,temperatura))
}
}
agosto<-1:31  #dias del mes de agosto
temp<-c()
if((dias>=1) | (dias<=31)){
for(dia in agosto){
temperatura<-as.numeric(readline("Ingrese temperatura en °C"))
temp<-as.numeric(c(temp,temperatura))
}
}
#Ingreso de los dias
dia<-as.integer(readline("Ingrese un día del mes de Agosto"))
#Para que el ingreso de dias sea entre los dias reales de agosto, es decir entre el 1 y el 31
while(dia<1 | dia>31){
dia<-as.integer(readline("Ingrese un dia del mes de Agosto"))
if(dia>=1 | dia<=31){
break
}
}
#Ingreso de la temperatura
temp<-c() #defino un vector vacío para que los ingresos de valores de temperatura se vayan guardando ahí
for (i in seq(1:31)) {
t<-as.numeric(readline("Ingresela temperatura"))
temp<-c(temp,t)
}
print(temp)
#Calculo del promedio
prom<-mean(temp)
#Impresión por consola, sin las comillas
for(valor in temp){
if(valor<prom){
cat("El dia",dia,"del mes de Agosto, la temperatura fue de",temp,"°C, es decir debajo de la media mensual","\n")
} else if (valor>prom) {
cat("El dia",dia,"del mes de Agosto, la temperatura fue de", temp,"°C, es decir encima de la media mensual","\n")
} else {
cat("El dia",dia,"del mes de Agosto, la temperatura fue de",temp,"°C, es decir igual a la media mensual","\n")
}
}
#Impresión por consola, sin las comillas
for(valor in temp){
if(valor<prom){
cat("El dia",dia,"del mes de Agosto, la temperatura fue de",t,"°C, es decir debajo de la media mensual","\n")
} else if (valor>prom) {
cat("El dia",dia,"del mes de Agosto, la temperatura fue de", t,"°C, es decir encima de la media mensual","\n")
} else {
cat("El dia",dia,"del mes de Agosto, la temperatura fue de",t,"°C, es decir igual a la media mensual","\n")
}
}
dias<-readline("Ingrese un dia del mes de Agosto")
agosto<-1:31  #dias del mes de agosto
temp<-0
for(dia in agosto){
for(dia in agosto){
temperatura<-as.numeric(readline("Ingrese temperatura en °C"))
repeat{
if(is.na(temperatura)){   #puse el while para que se repita hasta que deje de cumplir la conicion de is.na
temperatura<-as.numeric(readline("Ingrese la temperatura nuevamente en °C"))
}else{
break
}
}
temp<-temp+temperatura
if (dias==dia){
temp_analisis<-temperatura
}
}
source("~/.active-rstudio-document", echo=TRUE)
getwd()   #veo donde esta mi directorio
getwd()   #veo donde esta mi directorio
################ Ejercicio 8#############
rm(list=ls())
#Ejercicio 9
setwd("C:/Users/Fernando Cabrera/Desktop/Cami_Labo/Practicas/Datos Practica 3-20231011/")
load("t_media_EF.RData")
rownames(estaciones)<-c("Estacion Buenos Aires","Estacion Viedma" ,"Estacion Rosario","Estacion San Luis", "Estacion Resistencia")
colnames(estaciones)<-c("Estacion","Tmedia_enero","Tmedia_febrero")
estaciones_df<-data.frame(estaciones)
attach(estaciones_df)
estaciones_df
estaciones_df[1]
estaciones_df[[1]]
estaciones_df[[1]][1]
estaciones_df[[1]][[1]]
estaciones_df[1,2]
Estadisticos<-funcion(x){
Estadisticos<-funcion(x){
# Verificamos si la columna "Tmedia_febrero" existe en el dataframe
if ("Tmedia_febrero" %in% names(estaciones_df)) {
columna <- estaciones_df$Tmedia_febrero
media <- mean(columna, na.rm = TRUE)
desvio <- sd(columna, na.rm = TRUE)
maximo <- max(columna, na.rm = TRUE)
minimo <- min(columna, na.rm = TRUE)
cat("Media T:", media, "\n")
cat("Desvío Estándar T:", desvio, "\n")
cat("Valor Máximo T:", maximo, "\n")
cat("Valor Mínimo T:", minimo, "\n")
for (i in 1:nrow(estaciones_df)) {
estacion <- estaciones_df$Nombre_de_la_estacion[i]
cat("Estación:", estacion, "\n")
}
}
estaciones_df[[1]][2]
for(variable in names(estaciones_df)){
if(variable=="Tmedia_febrero"){
for(i in 1:nrow(estaciones_df)){
media<-mean(estaciones_df[[i,2]], na.rm=TRUE)
desvio<-sd(estaciones_df[[i,2]], na.rm = TRUE)
max<-max(estaciones_df[[i,2]], na.rm = TRUE)
min<-min(estaciones_df[[i,2]], na.rm = TRUE)
if(i==1){
datos_estadisticos<-list("estacion"=estaciones_df[[1]][[i]],"media"=media,"desvio"=desvio,"maximo"=max,"minimo"=min)
}else if (i==2){
datos_estadisticos<-list("estacion"=estaciones_df[[1]][[i]],"media"=media,"desvio"=desvio,"maximo"=max,"minimo"=min)
}else if (i==3){
datos_estadisticos<-list("estacion"=estaciones_df[[1]][[i]],"media"=media,"desvio"=desvio,"maximo"=max,"minimo"=min)
}else if (i==4){
datos_estadisticos<-list("estacion"=estaciones_df[[1]][[i]],"media"=media,"desvio"=desvio,"maximo"=max,"minimo"=min)
}else{
datos_estadisticos<-list("estacion"=estaciones_df[[1]][[i]],"media"=media,"desvio"=desvio,"maximo"=max,"minimo"=min)
}
}
}
}
# Verificamos si la columna "Tmedia_febrero" existe en el dataframe
if ("Tmedia_febrero" %in% names(estaciones_df)) {
datos_estadisticos <- list()  # Inicializamos una lista vacía para almacenar los resultados
for (i in 1:nrow(estaciones_df)) {
media <- mean(estaciones_df[[i, 2]], na.rm = TRUE)
desvio <- sd(estaciones_df[[i, 2]], na.rm = TRUE)
maximo <- max(estaciones_df[[i, 2]], na.rm = TRUE)
minimo <- min(estaciones_df[[i, 2]], na.rm = TRUE)
estadisticos <- list(
"estacion" = estaciones_df[[1]][[i]],
"media" = media,
"desvio" = desvio,
"maximo" = maximo,
"minimo" = minimo
)
# Agregamos los resultados de la estación actual a la lista
datos_estadisticos <- c(datos_estadisticos, list(estadisticos))
}
}
View(datos_estadisticos)
View(estadisticos)
for(variable in names(estaciones_df)){
if(variable=="Tmedia_febrero"){
for(i in 1:nrow(estaciones_df)){
media<-mean(estaciones_df[[i,2]], na.rm=TRUE)
desvio<-sd(estaciones_df[[i,2]], na.rm = TRUE)
max<-max(estaciones_df[[i,2]], na.rm = TRUE)
min<-min(estaciones_df[[i,2]], na.rm = TRUE)
estadisticos<-list(
"estacion" = estaciones_df[[1]][[i]],
"media" = media,
"desvio" = desvio,
"maximo" = max,
"minimo" = min
)
datos_estadisticos<-list(datos_estadisticos,estadisticos)
}
}
}
View(columna)
View(datos_estadisticos)
#Ejercicio 9
setwd("C:/Users/Fernando Cabrera/Desktop/Cami_Labo/Practicas/Datos Practica 3-20231011/")
load("t_media_EF.RData")
rownames(estaciones)<-c("Estacion Buenos Aires","Estacion Viedma" ,"Estacion Rosario","Estacion San Luis", "Estacion Resistencia")
colnames(estaciones)<-c("Estacion","Tmedia_enero","Tmedia_febrero")
estaciones_df<-data.frame(estaciones)
attach(estaciones_df)
datos_estadisticos<-list()
for(variable in names(estaciones_df)){
if(variable=="Tmedia_febrero"){
for(i in 1:nrow(estaciones_df)){
media<-mean(estaciones_df[[i,2]], na.rm=TRUE)
desvio<-sd(estaciones_df[[i,2]], na.rm = TRUE)
max<-max(estaciones_df[[i,2]], na.rm = TRUE)
min<-min(estaciones_df[[i,2]], na.rm = TRUE)
estadisticos<-list(
"estacion" = estaciones_df[[1]][[i]],
"media" = media,
"desvio" = desvio,
"maximo" = max,
"minimo" = min
)
datos_estadisticos<-list(datos_estadisticos,estadisticos)
}
}
}
View(datos_estadisticos)
datos_estadisticos<-list()
for(variable in names(estaciones_df)){
if(variable=="Tmedia_febrero"){
for(i in 1:nrow(estaciones_df)){
media<-mean(estaciones_df[[i,2]], na.rm=TRUE)
desvio<-sd(estaciones_df[[i,2]], na.rm = TRUE)
max<-max(estaciones_df[[i,2]], na.rm = TRUE)
min<-min(estaciones_df[[i,2]], na.rm = TRUE)
estadisticos<-list(
"estacion" = estaciones_df[[1]][[i]],
"media" = media,
"desvio" = desvio,
"maximo" = max,
"minimo" = min
)
datos_estadisticos<-c(datos_estadisticos,list(estadisticos))
}
}
}
View(datos_estadisticos)
